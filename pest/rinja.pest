Lexpr = _{"{{"}
Rexpr = _{"}}"}
Lcmt = _{"{#"}
Rcmt = _{"#}"}
Lstmt = _{ "{%"}
Rstmt = _{"%}"}
lncmt = _{"##"}

WHITESPACE = _{ " " }
// expr & stmt & comment
alpha = { 'a'..'z' | 'A'..'Z' }
digit = { '0'..'9' }
ident = { alpha ~ (alpha | digit)* }
operation = _{ add | subtract | multiply | divide | power | shift | cmp }
    add      = { "+" }
    subtract = { "-" }
    multiply = { "*" }
    divide   = { "/" }
    power    = { "^" }
    shift   = { "<<" | ">>" }
    cmp      = { "<=" | ">=" | "==" | "!=" | "<" | ">" }
expr = { (ident ~ "." ~ ident) | ident }

if_stmt = { Lstmt ~ "if" ~ expr ~ cmp ~ expr ~ Rstmt}
endif = _{Lstmt ~ "endif" ~ Rstmt}
single_stmt = { "set" ~ expr ~ "=" ~ expr}

//wrap means their wrapping deilmeter is also parsed
wrap_expr = {Lexpr ~ expr ~ Rexpr}
wrap_stmt = {Lstmt ~ single_stmt ~ Rstmt}
wrap_comment = _{Lcmt ~ (!Rcmt ~ ANY)* ~ Rcmt}
wrap_line_comment = _{"##" ~ (!"\n" ~ ANY)* ~ "\n"}
starting = { Lexpr | Lcmt | Lstmt | lncmt}

// multiple or nested statement construct a 'block'
if_block = { if_stmt ~ tmpl_unit ~ endif}
block = { if_block }

// template literal any char other than starting symbol of tmpl var/expr/stmt
tmpl_literal = @{(!starting ~ ANY)+}
tmpl_unit = _{ tmpl_literal? ~ wrap_expr ~ tmpl_unit 
| tmpl_literal? ~ wrap_stmt ~ tmpl_unit 
| tmpl_literal? ~ wrap_comment ~ tmpl_unit
| tmpl_literal? ~ wrap_line_comment ~ tmpl_unit
| tmpl_literal? ~ block ~ tmpl_unit
| EOI 
| tmpl_literal?}
