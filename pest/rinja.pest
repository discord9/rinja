// replace it later with passing in params using tmpl?
Lexpr = _{"{{"}
Rexpr = _{"}}"}
Lcmt = _{"{#"}
Rcmt = _{"#}"}
Lstmt = _{ "{%"}
Rstmt = _{"%}"}
lnstmt = _{"##"}

WHITESPACE = _{ " " }
keywords = {"for"|"endfor"|"if"|"else"|"endif"|"in"|"set"|"include"}
// expr & stmt & comment
alpha = _{ 'a'..'z' | 'A'..'Z' }
digit = _{ '0'..'9' }
ident = @{ !keywords ~ alpha ~ (alpha | digit)* }
operation = _{ add | subtract | multiply | divide | power | cmp }
    add      = { "+" }
    subtract = { "-" }
    multiply = { "*" }
    divide   = { "/" }
    power    = { "^" }
    // shift   = { "<<" | ">>" }
    cmp      = { ngt | nlt | eq | ne | lt | gt}
        ngt = { "<=" }
        nlt = { ">=" }
        eq = { "==" }
        ne = { "!=" }
        lt = { "<" }
        gt = { ">" }
// for now escape_char is just a 
escape_char = { "\\" ~ ((&"x" ~ "x" ~ ANY ~ ANY)|ANY) }
str = {"\"" ~ 
    (!"\"" ~ 
        (
            (&escape_char ~  ANY)
            | ANY
        )
    )* 
    ~ "\""
    }
num = @{ int ~ ("." ~ ASCII_DIGIT*)? ~ (^"e" ~ int)? }
    int = { ("+" | "-")? ~ ASCII_DIGIT+ }
subs = {ident ~ ("." ~ ident|"[" ~ str ~ "]")+}
lvalue = {subs | ident}
expr = { term ~ (operation ~ term)* }
call = {ident ~ "("~ (expr ~ ("," ~ expr)*)? ~ ")" }
term = _{ 
    call
    | "(" ~ expr ~ ")" 
    | subs 
    | ident 
    | num 
}

// all the statement
if_stmt = { Lstmt ~ "if" ~ expr ~ Rstmt
| lnstmt ~ "if" ~ expr ~ "\n"
}
// else if
else_if_stmt = { Lstmt ~ "else" ~ "if" ~ expr ~ Rstmt
| lnstmt ~ "else" ~ "if" ~ expr ~ "\n"
}
// else
else_stmt = _{ Lstmt ~ "else" ~ Rstmt
| lnstmt ~ "else" ~ "\n"}
// only endif/for and set_stmt can append by End of Input
endif = _{Lstmt ~ "endif" ~ Rstmt
| lnstmt ~ "endif" ~ ("\n"|&EOI)}

for_stmt = { Lstmt ~ 
"for" ~ ((ident ~ "," ~ ident)|ident) ~ "in" ~ expr ~ Rstmt
| lnstmt ~ "for" ~ ((ident ~ "," ~ ident)|ident) ~ "in" ~ expr ~ "\n"}

endfor = _{Lstmt ~ "endfor" ~ Rstmt
| lnstmt ~ "endfor" ~ ("\n"|&EOI)}

set_stmt = {Lstmt ~  "set" ~ lvalue ~ "=" ~ expr ~ Rstmt
| lnstmt ~ "set" ~ lvalue ~ "=" ~ expr ~ ("\n"|&EOI)}

include_stmt = {Lstmt ~ "include" ~ str ~ Rstmt
| lnstmt ~ "include" ~ str ~ ("\n"|&EOI)}

single_stmt = {set_stmt | include_stmt}
//wrap means their wrapping deilmeter is also parsed
wrap_comment = _{Lcmt ~ (!Rcmt ~ ANY)* ~ Rcmt}


// multiple or nested statement construct a 'block'
if_body = {if_stmt ~ 
    ((!else_if_stmt|else_stmt|endif|EOI) ~ tmpl_section)*
}
else_if_body = {else_if_stmt ~ 
    (!(else_stmt|endif|EOI) ~ tmpl_section)*
}
else_body = {else_stmt ~ 
    (!(endif|EOI) ~ tmpl_section)*
}
if_block = { if_body ~ 
            else_if_body* ~ 
            else_body?
             ~ endif}
for_block = {for_stmt ~ (!endfor ~ tmpl_section)* ~ endfor}
block = {if_block | for_block}

// to stop tmpl_literal
starting = { Lexpr | Lcmt | Lstmt | lnstmt}
// template literal any char other than starting symbol of tmpl var/expr/stmt
tmpl_literal = @{(!starting ~ ANY)+}
tmpl_section = _{block
| Lexpr ~ expr ~ Rexpr
| single_stmt
| wrap_comment
| tmpl_literal
}
tmpl_unit = _{ SOI ~ (!EOI ~ tmpl_section)* ~ EOI}

